{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Praefatio","text":"<p>Research Notes</p>"},{"location":"Languages/ast_example/","title":"AST Example","text":"Arbre 2 : Arbre de Jeu (de Nim) <p>CodeiiRangeRange33Range--3Body2BodyAssign2AssignBody2--Assign2a2aBody1BodyAssign1AssignBody1--Assign1ForForBody1--ForPrintPrintBody1--Printa1aAssign1--a122Assign1--2Assign2--a2\\*Assign2--\\For--iFor--RangeFor--Body2a4aPrint--a4a3a\\--a355\\--5"},{"location":"Tools/JustfileSpells/","title":"\ud83d\udca1 Harness Command-Line Brilliance with Justfile! \ud83d\ude80","text":"<p>Do your genius command-line ideas wander aimlessly without a home? Fear not, for <code>just</code> is here to save the day! While tools like <code>make</code> excel at build automation, <code>just</code> takes a different approach by focusing on human-readable command execution. In this tutorial, we\u2019ll use it to set up a workflow to effortlessly capture, organize, and execute your oneliner commands in a clean and concise manner. Let\u2019s embark on this adventure and bring your command-line brilliance to life! \ud83c\udf1f</p>"},{"location":"Tools/JustfileSpells/#justfile","title":"Justfile","text":"<p>To install <code>just</code> follow the official instructions.</p> <p>The easiest way to install it is with <code>gh</code> (the Github CLI) and its extension <code>install</code>. Install them and then run the following to install <code>just</code> at <code>$HOME/.local/bin</code>:</p> <pre><code>gh install casey/just\n</code></pre> <p>Then add the following lines to your <code>shell</code> config file to create an alias, so you don\u2019t mess with <code>just</code> if you use if for other projects.</p> <pre><code># For Bash at ~/.bashrc\nalias spell=\"just --justfile ~/Justfile\"\n# For Nushell at ~/.config/nushell/config.nu\nalias spell = just --justfile ~/Justfile\n</code></pre>"},{"location":"Tools/JustfileSpells/#suggested-workflow","title":"Suggested workflow","text":"<p>The following is my personal <code>Justfile</code> where I keep my occasional and funny occurrences. I located it at <code>$HOME/</code>. Also, this example may give a fair idea of the possibilities of <code>just</code>, as argument handling, optional arguments and command pipelines. Use it as an inspiration! \ud83e\udd13</p> <pre><code>set shell := [\"bash\", \"-c\"]\n\n# Print contents of `~/Justfile`\nself:\nbat --plain -n --language=make ~/Justfile\n\n# Generate a random DNA sequence\ndna:\n@cat /dev/urandom | tr -dc 'AGCT' | fold -w 32 | head -n 5\n# Get a random quote with a playful display\nfortune:\n@fortune -s | trans --brief en:es \\\n| tee &gt;(cowsay -f \"$(ls /usr/share/cowsay/cows | sort -R | head -1)\" | lolcat --random &gt;/dev/tty) \\\n| espeak -v spanish -k20\n\n# As tldr, gives a summarized man-page\ncheats CMD:\n@curl -sS cheat.sh/{{CMD}} | bat --style=plain\n\n# Returns all files called when CMD is executed\nusefile CMD:\nstrace {{CMD}} 2&gt;&amp;1 | grep \"^openat.*$HOME\" | sed 's/.*\"\\(.*\\)\".*/\\1/'\n# Search through the history with fzf\ndejavu WORD:\n  @# @nushell -c \"history\" -m light | awk '{$1=\"\"}1' \\# Replace the below line if you use Nushell\n@history | awk '{$1=\"\"; print $0}' | sort | uniq \\\n| fzf --tac --layout=reverse --height=40% +s -e -q \"{{WORD}}\"\n# Use ChatGPT from the command line\ngpt PROMPT:\n@podman run --rm \\\n--env OPENAI_API_KEY=\"YOUR_PERSONAL_TOKEN\" \\\n--volume gpt-cache:/tmp/shell_gpt ghcr.io/ther1d/shell_gpt \"{{PROMPT}}\"\n</code></pre> <p>In the previous <code>Justfile</code> I\u2019ve used a couple of commands that I encorage you to checkout \u2728:</p> <ul> <li><code>bat</code> A <code>cat(1)</code> clone with wings</li> <li><code>lolcat</code> Rainbows and unicorns!</li> <li><code>fzf</code> A command-line fuzzy finder</li> <li><code>espeak</code> A speech synthesizer</li> <li><code>podman</code> A daemonless tool to manage containers</li> </ul>"},{"location":"Tools/JustfileSpells/#usage","title":"Usage","text":"<p>One of the best parts of using <code>just</code> is that the comments above each snippet generates its own documentation :D</p> <p></p> <p>Now you\u2019ll have a convenient place where to put all those pilgrim ideas</p> <p> </p>"},{"location":"Tools/JustfileSpells/#conclusion","title":"Conclusion","text":"<p>Hope you\u2019ve enjoyed this tutorial. For further details the <code>just</code> official docs. Happy scripting!</p>"}]}